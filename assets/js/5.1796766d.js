(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{431:function(t,s,a){t.exports=a.p+"assets/img/1.d6048970.png"},442:function(t,s,a){"use strict";a.r(s);var n=a(29),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"git-相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-相关"}},[t._v("#")]),t._v(" Git 相关")]),t._v(" "),n("h2",{attrs:{id:"push报错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#push报错"}},[t._v("#")]),t._v(" push报错")]),t._v(" "),n("p",[t._v("Permanently added 'github.com,13.229.188.59' (RSA) to the list of known hosts.")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("ssh-keygen -t rsa -C "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx@xxx.com"')]),t._v(" // 重新生成rsa-key\n")])])]),n("p",[n("img",{attrs:{src:a(431),alt:"my-logo.png"}}),n("br"),t._v("\n打开 .ssh/id_rsa.pub. 复制ssh-key"),n("br"),t._v("\n粘贴到github，个人setting -> SSH and GPG keys，添加个新的key")]),t._v(" "),n("h2",{attrs:{id:"vscode-push失败"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vscode-push失败"}},[t._v("#")]),t._v(" vscode push失败")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://github.com/timofun/picture/blob/main/202112171557621.png?raw=true",alt:"my-logo.png"}})]),t._v(" "),n("h2",{attrs:{id:"githook-工具-husky-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#githook-工具-husky-配置"}},[t._v("#")]),t._v(" GitHook 工具 —— husky 配置")]),t._v(" "),n("p",[t._v("husky 是一个 Git Hook 工具。本文主要实现提交前 eslint 校验和 commit 信息的规范校验。"),n("br"),t._v(" "),n("strong",[t._v("1. 安装 husky，lint-staged，@commitlint/cli，@commitlint/config-conventional 依赖")])]),t._v(" "),n("p",[t._v("*lint-staged: 用于实现每次提交只检查本次提交所修改的文件。")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i -D husky lint-staged @commitlint/cli @commitlint/config-conventional\n")])])]),n("blockquote",[n("p",[t._v("注意：一定要使用 npm 安装 eslint 和 husky，因为在 windows 操作系统下, 用 yarn 安装依赖，不会触发 husky pre-commit 钩子命令。")])]),t._v(" "),n("p",[n("strong",[t._v("2. 创建 .huskyrc")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n  "hooks": {\n    "pre-commit": "lint-staged",\n    "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"\n  }\n}\n')])])]),n("p",[n("strong",[t._v("3. 创建 .lintstagedrc")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n  "src/**/*.js": "eslint"\n}\n')])])]),n("p",[t._v("设置 fix 可以自动修复错误：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n   "src/**/*.js": ["eslint --fix", "git add"]\n}\n')])])]),n("p",[t._v("或者使用下面的配置，自动格式化代码（谨慎使用）：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n   "src/**/*.js": ["prettier --write", "git add"]\n}\n')])])]),n("p",[n("strong",[t._v("4. 创建 commitlint.config.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("module.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [\n        2,\n        'always',\n        [\n            'feat', // 新功能（feature）\n            'update', // 更新小逻辑\n            'fix', // 修补bug\n            'docs', // 文档（documentation）\n            'style', // 格式（不影响代码运行的变动）\n            'refactor', // 重构（即不是新增功能，也不是修改bug的代码变动）\n            'perf', // 更改代码以提高性能\n            'test', // 增加测试\n            'build', // 构建过程或辅助工具的变动\n            'ci', // 修改项目继续集成流程\n            'chore', // 其他改动\n            'revert' // 回滚\n        ],\n    ],\n    'type-empty': [2, 'never'], // 提交不符合规范时,也可以提交,但是会有警告\n    'subject-empty': [2, 'never'], // 提交不符合规范时,也可以提交,但是会有警告\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n  }\n}\n")])])]),n("h2",{attrs:{id:"同一台电脑同时使用github和gitlab"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同一台电脑同时使用github和gitlab"}},[t._v("#")]),t._v(" 同一台电脑同时使用gitHub和gitLab")]),t._v(" "),n("p",[t._v("一、进入ssh文件夹（cd ~/.ssh）")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".ssh-keygen -t rsa -C "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx@xxx.com"')]),t._v(" // 重新生成rsa-key     \n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(".按回车，再按3次enter键，生成对应的gitlab密钥：id_rsa和id_rsa.pub   \n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(".将gitlab公钥即id_rsa.pub（~/.ssh）中的内容配置到公司的gitlab上   \n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(".ssh-keygen -t rsa -C "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github邮箱地址"')]),t._v(" -f ~/.ssh/github_rsa   \n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(".将github公钥即github_rsa.pub中的内容配置到自己的github上  \n")])])]),n("p",[t._v("二、进入密钥生成的位置（~/.ssh/），手动创建一个config文件（注意这个config文件要无后缀）。")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自己的github账号配置")]),t._v("\nHost github.com\n    User "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/github_rsa\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 公司的gitlab账号配置(HostName为公司的gitlab地址)")]),t._v("\nHost gitlab.com\n    User "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n    HostName gitlab.xxx.com\n    User "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa \n")])])]),n("p",[t._v("字段配置简单说明：")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("Host\n    Host可以看作是一个你要识别的模式，对识别的模式，配置对应的主机名和ssh文件\nPort\n    自定义的端口。默认为22，可不配置\nUser\n    自定义的用户名，默认为git，可不配置\nHostName\n    真正连接的服务器地址\nPreferredAuthentications\n    指定优先使用哪种方式验证，支持密码和秘钥验证方式\nIdentityFile\n    指定本次连接使用的密钥文件\n")])])]),n("p",[t._v("三、验证是否设置成功")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试github")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" -T git@github.com\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试gitlab(@符后面的为公司gitlab地址)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" -T git@gitlab.xxx.com\n")])])]),n("p",[t._v("四、git配置"),n("br"),t._v("\ngit系统级别对应的配置文件是git安装目录下的 /etc/gitconfig")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("用户级别配置\n\n用户级别是配置公司gitlba账号还是自己github账号，可以自由选择。因为平常使用公司的代码频率较高，所以我选择将gitlab账号配置成用户级别。gitBath下执行如下命令：\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lfr'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#公司账号名称")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lfr@company.com'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#公司账号邮箱")]),t._v("\n\n仓库级别配置\n\nlocal（仓库级别）配置成github的账号。选择一个文件夹作为github的本地仓库，在该文件夹里鼠标右键打开Git Bash Here，执行命令：git init\n\n再执行命令：\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --local user.name "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'username'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#github账号名称")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --local user.email "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'username@gmail.com'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#github账号邮箱")]),t._v("\n\n之后自己的github的代码都应该在这个仓库下进行pull、push操作。\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);